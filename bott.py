import logging
import requests
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters
)
from config import TOKEN, WEBHOOK_URL

logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
MAIN_MENU, REG_CITY, REG_LAST, REG_FIRST, REG_MIDDLE, REG_CLASS, REG_PHONE, REG_EMAIL, \
FB_SCORE, FB_USEFUL, FB_APPLY, FB_TOPICS, FB_INVITE, FB_SOUVENIR = range(14)

CITIES = ["–ë–∞–≥–∞–Ω","–ò—Å–∫–∏—Ç–∏–º","–ö–∞—Ä–∞—Å—É–∫","–ö—É–ø–∏–Ω–æ","–ú–∞—Å–ª—è–Ω–∏–Ω–æ","–°—É–∑—É–Ω","–¢–∞—Ç–∞—Ä—Å–∫","–¢–æ–≥—É—á–∏–Ω","–ß–∞–Ω—ã","–ß–µ—Ä–µ–ø–∞–Ω–æ–≤–æ"]

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É
def send_to_sheet(payload: dict, sheet: str):
    try:
        data = {"sheet": sheet, **payload}
        requests.post(WEBHOOK_URL, json=data, timeout=10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Script: {e}")

# /start
async def start(update, context):
    keyboard = [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"], ["–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]]
    await update.message.reply_text(
        "üìò –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å ¬´–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞¬ª\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return MAIN_MENU

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update, context):
    choice = update.message.text
    if choice == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        await update.message.reply_text(
            "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?",
            reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return REG_CITY
    elif choice == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        await update.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –æ—Ç 1 –¥–æ 5:", reply_markup=ReplyKeyboardRemove())
        return FB_SCORE
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.")
        return MAIN_MENU

# ======== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ========
async def reg_city(update, context):
    if update.message.text != "–î–∞":
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:",
        reply_markup=ReplyKeyboardMarkup([[c] for c in CITIES], one_time_keyboard=True, resize_keyboard=True)
    )
    return REG_LAST

async def reg_last(update, context):
    context.user_data["city"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:", reply_markup=ReplyKeyboardRemove())
    return REG_FIRST

async def reg_first(update, context):
    context.user_data["last_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    return REG_MIDDLE

async def reg_middle(update, context):
    context.user_data["first_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")
    return REG_CLASS

async def reg_class(update, context):
    context.user_data["middle_name"] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≤—ã –∫–ª–∞—Å—Å–µ? (—Ü–∏—Ñ—Ä–æ–π):")
    return REG_PHONE

async def reg_phone(update, context):
    context.user_data["class_num"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(000)1234567:")
    return REG_EMAIL

async def reg_email(update, context):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:")
    return FB_SCORE  # –∫–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

async def reg_end(update, context):
    context.user_data["email"] = update.message.text
    payload = {
        "user_id": update.effective_user.id,
        "city": context.user_data.get("city"),
        "last_name": context.user_data.get("last_name"),
        "first_name": context.user_data.get("first_name"),
        "middle_name": context.user_data.get("middle_name"),
        "class_num": context.user_data.get("class_num"),
        "phone": context.user_data.get("phone"),
        "email": context.user_data.get("email"),
    }
    send_to_sheet(payload, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ======== –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ ========
async def fb_score(update, context):
    context.user_data["score"] = update.message.text
    await update.message.reply_text(
        "–ë—ã–ª –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–ß–∞—Å—Ç–∏—á–Ω–æ"], ["–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return FB_USEFUL

async def fb_useful(update, context):
    context.user_data["useful"] = update.message.text
    await update.message.reply_text(
        "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–í–æ–∑–º–æ–∂–Ω–æ"], ["–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return FB_APPLY

async def fb_apply(update, context):
    context.user_data["apply"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?")
    return FB_TOPICS

async def fb_topics(update, context):
    context.user_data["topics"] = update.message.text
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –±—É–¥—É—â–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return FB_INVITE

async def fb_invite(update, context):
    context.user_data["invite"] = update.message.text
    await update.message.reply_text(
        "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—É–≤–µ–Ω–∏—Ä–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é (–±–ª–æ–∫–Ω–æ—Ç, —Ä—É—á–∫–∞, –ø–∞–∫–µ—Ç)?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return FB_SOUVENIR

async def fb_souvenir(update, context):
    context.user_data["souvenir"] = update.message.text
    payload = {
        "user_id": update.effective_user.id,
        "score": context.user_data.get("score"),
        "useful": context.user_data.get("useful"),
        "apply": context.user_data.get("apply"),
        "topics": context.user_data.get("topics"),
        "invite": context.user_data.get("invite"),
        "souvenir": context.user_data.get("souvenir"),
    }
    send_to_sheet(payload, "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update, context):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            REG_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_city)],
            REG_LAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_last)],
            REG_FIRST: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_first)],
            REG_MIDDLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_middle)],
            REG_CLASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_class)],
            REG_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_phone)],
            REG_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_email)],
            FB_SCORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, fb_score)],
            FB_USEFUL: [MessageHandler(filters.TEXT & ~filters.COMMAND, fb_useful)],
            FB_APPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, fb_apply)],
            FB_TOPICS: [MessageHandler(filters.TEXT & ~filters.COMMAND, fb_topics)],
            FB_INVITE: [MessageHandler(filters.TEXT & ~filters.COMMAND, fb_invite)],
            FB_SOUVENIR: [MessageHandler(filters.TEXT & ~filters.COMMAND, fb_souvenir)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram.")
    app.run_polling()

if __name__ == "__main__":
    main()
